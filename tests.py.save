from main import BooksCollector

# класс TestBooksCollector объединяет набор тестов, которыми мы покрываем наше приложение BooksCollector
# обязательно указывать префикс Test
class TestBooksCollector:

    # пример теста:
    # обязательно указывать префикс test_
    # дальше идет название метода, который тестируем add_new_book_
    # затем, что тестируем add_two_books - добавление двух книг
    def test_add_new_book_add_two_books(self):
        # создаем экземпляр (объект) класса BooksCollector
        collector = BooksCollector()

        # добавляем две книги
        collector.add_new_book('Гордость и предубеждение и зомби')
        collector.add_new_book('Что делать, если ваш кот хочет вас убить')

        # проверяем, что добавилось именно две
        # словарь books_rating, который нам возвращает метод get_books_rating, имеет длину 2
        assert len(collector._books_genre()) == 2
    def test_set_book_genre(self):
        # создаем экземпляр (объект) класса BooksCollector
        collector = BooksCollector()
        collector.set_books_genre('Гордость и предубеждение и зомби','Фантастика')
        assert.collector.books_genre ['Гордость и предубеждение и зомби']== 'Фантастика'

    def test_get_book_genre(self):
        # создаем экземпляр (объект) класса BooksCollector
        collector = BooksCollector()
        genre=collector.get_book_genre('Гордость и предубеждение и зомби')
        assert.genre == 'Фантастика'

    def test_get_books_with_specific_genre(self):
        # создаем экземпляр (объект) класса BooksCollector
        collector = BooksCollector()
        collector.add_new_book('Гордость и предубеждение и зомби')
        collector.add_new_book('Что делать, если ваш кот хочет вас убить')
        collector.set_books_genre('Что делать, если ваш кот хочет вас убить','Комедии')
        collector.set_books_genre('Гордость и предубеждение и зомби','Комедии')
        assert collector.get_books_with_specific_genre('Комедии')==['Что делать, если ваш кот хочет вас убить', 'Гордость и предубеждение и зомби']

    def test_get_books_genre(self):
        # создаем экземпляр (объект) класса BooksCollector
        collector = BooksCollector()
        collector.set_books_genre = ['Ужасы','Фантастика','Комедии']
        collector.add_new_book('Гордость и предубеждение и зомби','Что делать, если ваш кот хочет вас убить','Тупой и еще тупее')
        result=collector.get_books_genre()
        book = {
                'Гордость и предубеждение и зомби': 'Ужасы'
                'Что делать, если ваш кот хочет вас убить':'Фантастика'
                'Тупой и еще тупее':'Комедии'
               }
               assert book == result

   def test_get_books_for_children(self):
        # создаем экземпляр (объект) класса BooksCollector
        collector = BooksCollector()
        collector.add_new_book('Лунтик')
        collector.set_books_genre('Лунтик','Мультфильмы')
        children_books=collector.get_books_for_children()
        book = {'Лунтик':'Мультфильмы'}
        assert book==children_books

   def test_add_book_in_favorites(self):
        # создаем экземпляр (объект) класса BooksCollector
        collector = BooksCollector()
        name = 'Лунтик'
        genre = 'Мультфильмы'
        collector.book_genre[name]=genre
        collector.add_book_in_favorites(name)
        assert name not in collector.favorites
        collector.add_book_in_favorites(name)
        assert name in collector.favorites

   def test_delete_book_from_favorites(self):
        # создаем экземпляр (объект) класса BooksCollector
        collector = BooksCollector()
        collector.add_new_book('Лунтик')
        collector.add_book_in_favorites('Лунтик')
        collector.delete_book_from_favorites('Лунтик')
        assert 'Лунтик' not in collector.favorites

   def test_get_list_of_favorites_books(self):
        # создаем экземпляр (объект) класса BooksCollector
        collector = BooksCollector()
        name = 'Лунтик'
        genre = 'Мультфильмы'
        collector.book_genre[name]=genre
        collector.add_book_in_favorites(name)
        assert name in collector.favorites
        result=collector.get_list_of_favorites_books()
        book={name}
        assertEqual(result,book)